name: 'build and push docker images'
description: 'build server image'
inputs:
    service:
        description: "service name"
        required: false
        default: 'server'
    feature:
        description: "environment for deploy"
        required: true
        default: 'dev'
    IMAGE_TAG:
        description: "version build soft"
        required: true
        default: 'latest'
    DB_PASSWORD:
        description: 'db pasword'
        required: true
        default: ''
    QUEUE_PASSWORD:
        description: 'QUEUE_PASSWORD'
        required: true
    INMEMORY_PASSWORD:
        description: 'INMEMORY_PASSWORD'
        required: true
    EMAIL_PASSWORD:
        description: 'EMAIL_PASSWORD'
        required: true
    ACCESS_TOKEN_SECRET:
        description: 'ACCESS_TOKEN_SECRET'
        required: true
    REFRESH_TOKEN_SECRET:
        description: 'REFRESH_TOKEN_SECRET'
        required: true
    SMS_SMSRU_TOKEN:
        description: 'SMSRU pasword'
        required: true
    CH_PASSWORD:
        description: 'СР pasword'
        required: true
    DEV_SERVER_1:
        description: 'url сервера'
        required: true
        default: 'dev.ridom.ru'
    CR_REGISTRY:
        description: 'yandex id container registry'
        required: true
    CR_REPOSITORY:
        description: 'yandex id container '
        required: true

runs:
    using: 'composite'
    steps:
        - name: Build, tag, and push image to Yandex Cloud Container Registry
          shell: bash
          run: |
            echo "DB_PASSWORD = ${{ inputs.DB_PASSWORD }}" >> ./database.env 
            echo "QUEUE_PASSWORD = ${{ inputs.QUEUE_PASSWORD }}" >> ./rabbitmq.env
            echo "INMEMORY_PASSWORD = ${{ inputs.INMEMORY_PASSWORD }}" >> ./redis.env
            echo "EMAIL_PASSWORD = ${{ inputs.EMAIL_PASSWORD }}" >> ./server/env.docker
            echo "ACCESS_TOKEN_SECRET = ${{ inputs.ACCESS_TOKEN_SECRET }}" >> ./server/env.docker
            echo "REFRESH_TOKEN_SECRET = ${{ inputs.REFRESH_TOKEN_SECRET }}" >> ./server/env.docker
            echo "SMS_SMSRU_TOKEN = ${{ inputs.SMS_SMSRU_TOKEN }}" >> ./server/env.docker
            echo "CH_PASSWORD = ${{ inputs.CH_PASSWORD }}" >> ./clickhouse.env
            docker context create remote --docker "host=ssh://dev-docker@${{ inputs.DEV_SERVER_1 }}"
            docker context use remote
            docker compose stop ${{ inputs.feature }}-${{ inputs.service }}
            docker compose rm ${{ inputs.feature }}-${{ inputs.service }}
            docker pull cr.yandex/${{ inputs.CR_REGISTRY }}/${{ inputs.CR_REPOSITORY }}:${{ inputs.IMAGE_TAG }}
            export SERVER_VERSION=${{ inputs.IMAGE_TAG }}
            echo $SERVER_VERSION
            SERVER_VERSION=${{ inputs.IMAGE_TAG }} docker compose up -d --no-deps ${{ inputs.feature }}-${{ inputs.service }}
            docker image prune -a -f                